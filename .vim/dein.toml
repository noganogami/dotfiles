  [[plugins]]
repo = 'jonathanfilip/vim-lucius'
hook_add = '''
  let g:lucius_style = 'dark'
  let g:lucius_contrast = 'low'
  let g:lucius_contrast_bg = 'high'
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
  let g:airline_theme = 'lucius'
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#formatter = 'unique_tail'
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'edkolev/tmuxline.vim'
hook_add = '''
  let g:tmuxline_theme = 'lucius'
  let g:airline#extensions#tmuxline#enabled = 1
'''
depends = ['vim-airline']

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-speeddating'

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  let g:winresizer_start_key = '<C-t>'
  let g:winresizer_vert_resize = 3
'''

[[plugins]]
repo = 'kana/vim-fakeclip'

[[plugins]]
repo = 'lambdalisue/mr.vim'

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo =  'Shougo/ddu.vim'
hook_add = '''
  call ddu#custom#patch_global({
      \   'ui': 'ff',
      \   'sourceOptions': {
      \     '_': {
      \       'matchers': ['matcher_substring'],
      \     },
      \   },
      \   'kindOptions': {
      \     'file': {
      \       'defaultAction': 'open',
      \     },
      \     'word': {
      \       'defaultAction': 'append',
      \     },
      \   }
      \ })

  autocmd FileType ddu-ff call s:ddu_ff_settings()
  function! s:ddu_ff_settings() abort
    nnoremap <buffer><silent> <CR>
    \  <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
    nnoremap <buffer><silent> o
    \  <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
    nnoremap <buffer><silent> <Space>
    \  <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'insert'})<CR>
    nnoremap <buffer><silent> t
    \  <Cmd>call ddu#ui#ff#do_action('itemAction', {'params': {'command': 'tabe'}})<CR>
    nnoremap <buffer><silent> s
    \  <Cmd>call ddu#ui#ff#do_action('itemAction', {'params': {'command': 'split'}})<CR>
    nnoremap <buffer><silent> v
    \  <Cmd>call ddu#ui#ff#do_action('itemAction', {'params': {'command': 'vsplit'}})<CR>
    nnoremap <buffer><silent> i
          \ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
    nnoremap <buffer><silent> >
    \ <Cmd>call ddu#ui#ff#do_action('updateOptions', {
    \   'sourceOptions': {
    \     '_': {
    \       'matchers': ToggleHidden(),
    \     },
    \   },
    \ })<CR>
    nnoremap <buffer><silent> q
          \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
  endfunction

  autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
  function! s:ddu_filter_my_settings() abort
    inoremap <buffer><silent> <CR>
    \ <Esc><Cmd>call ddu#ui#ff#do_action('closeFilterWindow')<CR>
    nnoremap <buffer><silent> <CR>
    \ <Cmd>call ddu#ui#ff#do_action('closeFilterWindow')<CR>
    nnoremap <buffer><silent> q
    \ <Cmd>call ddu#ui#ff#do_action('closeFilterWindow')<CR>
  endfunction

  call ddu#custom#patch_local('filer', {
      \   'ui': 'filer',
      \   'sources': [
      \     {
      \       'name': 'file',
      \       'params': {
      \         'ignoredDirectories': ['.git', '.mypy_cache', '__pycache__', 'bin']
      \       }
      \     }
      \   ],
      \   'sourceOptions': {
      \     '_': {
      \       'columns': ['filename'],
      \       'matchers': ['matcher_hidden'],
      \     },
      \   },
      \   'kindOptions': {
      \     'file': {
      \       'defaultAction': 'open',
      \     },
      \   }
      \ })

  autocmd FileType ddu-filer call s:ddu_filer_settings()
  function! s:ddu_filer_settings() abort
    nnoremap <buffer><silent><expr> <CR>
    \  ddu#ui#get_item()->get('isTree', v:false) ?
    \  "<Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'narrow'})<CR>" :
    \  "<Cmd>call ddu#ui#filer#do_action('itemAction')<CR>"
    nnoremap <buffer><silent><expr> o
    \  ddu#ui#get_item()->get('isTree', v:false) ?
    \  "<Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'narrow'})<CR>" :
    \  "<Cmd>call ddu#ui#filer#do_action('itemAction')<CR>"
    nnoremap <buffer><silent><expr> t
    \  "<Cmd>call ddu#ui#filer#do_action('itemAction', {'params': {'command': 'tabe'}})<CR>"
    nnoremap <buffer><silent><expr> s
    \  "<Cmd>call ddu#ui#filer#do_action('itemAction', {'params': {'command': 'split'}})<CR>"
    nnoremap <buffer><silent><expr> v
    \  "<Cmd>call ddu#ui#filer#do_action('itemAction', {'params': {'command': 'vsplit'}})<CR>"
    nnoremap <buffer><silent> n
    \ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'newFile'})<CR>
    nnoremap <buffer><silent> m
    \ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'newDirectory'})<CR>
    nnoremap <buffer><silent> d
    \ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'delete'})<CR>
    nnoremap <buffer><silent> r
    \ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'rename'})<CR>
    nnoremap <buffer><silent> ..
    \  <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'narrow', 'params': {'path': '..'}})<CR>
    nnoremap <buffer><silent> >
    \  <Cmd>call ddu#ui#filer#do_action('updateOptions', {
    \    'sourceOptions': {
    \      '_': {
    \        'matchers': ToggleHidden(),
    \      },
    \    },
    \  })<CR>
    nnoremap <buffer><silent> q
    \  <Cmd>call ddu#ui#filer#do_action('quit')<CR>
  endfunction

  function! ToggleHidden()
    let current = ddu#custom#get_current(b:ddu_ui_name)
    let source_options = get(current, 'sourceOptions', {})
    let source_options_all = get(source_options, '_', {})
    let matchers = get(source_options_all, 'matchers', [])
    let matcher_idx = index(matchers, 'matcher_hidden')

    if matcher_idx >= 0
      call remove(matchers, matcher_idx)
    else
      call add(matchers, 'matcher_hidden')
    endif
    return matchers
  endfunction

  nnoremap <silent> ;f 
  \  <Cmd>call ddu#start({
  \     'uiParams': {
  \       'ff': {
  \         'startFilter': v:false
  \       }
  \     },
  \     'sources': [{'name': 'file_rec'}],
  \   })<CR>
  nnoremap <silent> ;b 
  \  <Cmd>call ddu#start({'sources': [{'name': 'buffer'}]})<CR>
  nnoremap <silent> ;r 
  \  <Cmd>call ddu#start({
  \     'sources': [{'name': 'register'}],
  \     'sourceOptions': {
  \       '_': {
  \         'converters': ['filter_prefix'],
  \       },
  \     },
  \   })<CR>
  nnoremap <silent> ;m 
  \  <Cmd>call ddu#start({'sources': [{'name': 'mr'}]})<CR>
  nnoremap <silent> ;t
  \  <Cmd>call ddu#start({'name': 'filer'})<CR>
''' 

[[plugins]]
repo = 'Shougo/ddu-ui-ff'

[[plugins]]
repo = 'Shougo/ddu-ui-filer'

[[plugins]]
repo = 'Shougo/ddu-column-filename'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'

[[plugins]]
repo = 'Shougo/ddu-source-file'

[[plugins]]
repo = 'Shougo/ddu-source-buffer'

[[plugins]]
repo = 'Shougo/ddu-source-register'

[[plugins]]
repo = 'kuuote/ddu-source-mr'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_hidden'

[[plugins]]
repo = 'Shougo/ddu-filter-sorter_alpha'

[[plugins]]
repo = 'Shougo/ddu-kind-file'

[[plugins]]
repo = 'Shougo/ddu-kind-word'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
  autocmd BufWritePre *.py,*.go execute('LspDocumentFormatSync')
  autocmd BufWritePre *.ts,*.tsx execute('LspDocumentFormatSync --server=efm-langserver')
  autocmd BufWritePre *.go execute('LspCodeActionSync source.organizeImports')
  nnoremap <silent> gd :LspDefinition<CR>
  nnoremap <silent> gi :LspImplementation<CR>
  '''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
hook_add = '''
  let g:lsp_diagnostics_echo_cursor = 1
  let g:lsp_settings = {
  \  'pylsp-all': {
  \    'workspace_config': {
  \      'pylsp': {
  \        'configurationSources': ['flake8'],
  \        'plugins': {
  \          'autopep8': {
  \            'enabled': 0
  \          },
  \          'black': {
  \            'enabled': 1,
  \            'preview': 0
  \          },
  \          'flake8': {
  \            'enabled': 1,
  \            'maxLineLength': 88
  \          },
  \          'mccabe': {
  \            'enabled': 0
  \          },
  \          'pycodestyle': {
  \            'enabled': 0
  \          },
  \          'pyflakes': {
  \            'enabled': 0
  \          },
  \          'pyls_isort': {
  \            'enabled': 1
  \          },
  \          'pylsp_mypy': {
  \            'enabled': 1
  \          },
  \          'yapf': {
  \            'enabled': 0
  \          }
  \        }
  \      }
  \    }
  \  },
  \  'efm-langserver': {
  \   'disabled': v:false
  \  },
  \}

'''
