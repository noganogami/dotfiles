[[plugins]]
repo = 'Shougo/ddc-source-lsp'

[[plugins]]
repo = 'uga-rosa/ddc-source-lsp-setup'

[[plugins]]
repo = 'neovim/nvim-lspconfig'

[[plugins]]
repo = 'williamboman/mason.nvim'

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
lua_add = '''
  require("ddc_source_lsp_setup").setup()

  require("mason").setup()
  require("mason-lspconfig").setup({
    ensure_installed = {
      "typos_lsp",
      "tsserver", 
      "gopls", 
      "clangd", 
      "pylsp" 
    }
  })
  require("mason-lspconfig").setup_handlers {
    function(server_name)
      local opt = {
        on_attach = function(client, bufnr)
          if client.supports_method "textDocument/format" then
            vim.cmd 'autocmd BufWritePre <buffer> lua vim.lsp.buf.format()'
          end
          if client.supports_method "textDocument/documentHighlight" then
            vim.opt.updatetime = 1000
            vim.cmd 'highlight LspReferenceText  ctermbg=8'
            vim.cmd 'highlight LspReferenceRead  ctermbg=8'
            vim.cmd 'highlight LspReferenceWrite ctermbg=8'
            vim.cmd 'highlight DiagnosticSignError  ctermfg=15 ctermbg=9'
            vim.cmd 'highlight DiagnosticSignWarn  ctermfg=0 ctermbg=11'
            vim.cmd 'highlight DiagnosticSignInfo ctermfg=15 ctermbg=0'
            vim.cmd 'autocmd CursorHold <buffer> lua vim.lsp.buf.document_highlight()'
            vim.cmd 'autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references()'
          end
        end,
      }
      require("lspconfig")[server_name].setup(opt)
    end,
    ["clangd"] = function ()
      local lspconfig = require('lspconfig')
      lspconfig.clangd.setup({
        init_options = {
          fallbackFlags = { '-std=c++17' },
        },
      })
    end
    ["lua_ls"] = function ()
      lspconfig.lua_ls.setup({
        settings = {
            Lua = {
                diagnostics = {
                    globals = { "vim" }
                }
            }
        }
      })
    end
  }

  vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
      vim.lsp.diagnostic.on_publish_diagnostics, { 
        underline = true,
        virtual_text = false,
      }
  )

  vim.keymap.set('n', 'gh',  '<cmd>lua vim.lsp.buf.hover()<CR>')
  vim.keymap.set('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>')
  vim.keymap.set('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>')
  vim.keymap.set('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>')
  vim.keymap.set('n', 'gn', '<cmd>lua vim.lsp.buf.rename()<CR>')
  vim.keymap.set('n', 'ga', '<cmd>lua vim.lsp.buf.code_action()<CR>')
  vim.keymap.set('n', 'g]', '<cmd>lua vim.diagnostic.goto_next()<CR>')
  vim.keymap.set('n', 'g[', '<cmd>lua vim.diagnostic.goto_prev()<CR>')
  vim.keymap.set('n', 'ge',  '<cmd>lua vim.diagnostic.open_float()<CR>')
'''
